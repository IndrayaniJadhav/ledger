# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-03-29 03:31
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion

    
class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    state_operations = [
        migrations.CreateModel(
            name='BpayCollection',
            fields=[
                ('date', models.DateField(primary_key=True, serialize=False)),
                ('count', models.IntegerField()),
                ('credit_total', models.DecimalField(decimal_places=2, max_digits=12)),
                ('cheque_total', models.DecimalField(decimal_places=2, max_digits=12)),
                ('debit_total', models.DecimalField(decimal_places=2, max_digits=12)),
                ('total', models.DecimalField(decimal_places=2, max_digits=12)),
            ],
            options={
                'db_table': 'bpay_bpaycollection_v',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='BillerCodeRecipient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
            ],
            options={
                'db_table': 'bpay_billercoderecipient',
            },
        ),
        migrations.CreateModel(
            name='BillerCodeSystem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('biller_code', models.CharField(max_length=10, unique=True)),
                ('system', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'bpay_billercodesystem',
            },
        ),
        migrations.CreateModel(
            name='BpayAccountRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('credit_items', models.IntegerField(default=0)),
                ('credit_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('cheque_items', models.IntegerField(default=0)),
                ('cheque_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('debit_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('debit_items', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'bpay_bpayaccountrecord',
            },
        ),
        migrations.CreateModel(
            name='BpayAccountTrailer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('records', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'bpay_bpayaccountrailer',
            },
        ),
        migrations.CreateModel(
            name='BpayFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inserted', models.DateTimeField(auto_now_add=True)),
                ('created', models.DateTimeField(help_text=b'File Creation Date Time.')),
                ('file_id', models.BigIntegerField(help_text=b'File Identification Number.')),
            ],
            options={
                'db_table': 'bpay_bpayfile',
            },
        ),
        migrations.CreateModel(
            name='BpayFileTrailer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('groups', models.IntegerField(default=0)),
                ('records', models.IntegerField(default=0)),
                ('file', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='trailer', to='payments.BpayFile')),
            ],
            options={
                'db_table': 'bpay_bpayfiletrailer',
            },
        ),
        migrations.CreateModel(
            name='BpayGroupRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('settled', models.DateTimeField(help_text=b'File Settlement Date Time')),
                ('modifier', models.IntegerField(choices=[(1, b'interim/previous day'), (2, b'final/previous day'), (3, b'interim/same day'), (4, b'final/same day')], help_text=b'As of Date modifier')),
                ('file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_records', to='payments.BpayFile')),
            ],
            options={
                'db_table': 'bpay_bpaygrouprecord',
            },
        ),
        migrations.CreateModel(
            name='BpayGroupTrailer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('accounts', models.IntegerField(default=0)),
                ('records', models.IntegerField(default=0)),
                ('file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_trailerrecords', to='payments.BpayFile')),
            ],
            options={
                'db_table': 'bpay_bpaygrouptrailer',
            },
        ),
        migrations.CreateModel(
            name='BpayTransaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('type', models.CharField(choices=[(b'399', b'credit'), (b'699', b'debit')], help_text=b'Indicates whether it is a credit or debit item', max_length=3, validators=[django.core.validators.MinLengthValidator(3)])),
                ('cheque_num', models.IntegerField(default=0, help_text=b'Number of cheques in deposit')),
                ('crn', models.CharField(help_text=b'Customer Referencer Number', max_length=20)),
                ('txn_ref', models.CharField(help_text=b'Transaction Reference Number', max_length=21, validators=[django.core.validators.MinLengthValidator(12)])),
                ('service_code', models.CharField(help_text=b'Unique identification for a service provider realting to a bill.', max_length=7, validators=[django.core.validators.MinLengthValidator(1)])),
                ('p_instruction_code', models.CharField(choices=[(b'05', b'payment'), (b'15', b'error correction'), (b'25', b'reversal')], help_text=b'Payment instruction method.', max_length=2, validators=[django.core.validators.MinLengthValidator(2)])),
                ('p_method_code', models.CharField(choices=[(b'001', b'Debit Account'), (b'101', b'Visa'), (b'201', b'Mastercard'), (b'301', b'Bankcard')], help_text=b'Method of payment.', max_length=3, validators=[django.core.validators.MinLengthValidator(3)])),
                ('p_date', models.DateTimeField(help_text=b'Date of payment.')),
                ('entry_method', models.CharField(blank=True, choices=[(b'000', b'undefined'), (b'001', b'key entry by operator'), (b'002', b'touch tone entry by payer'), (b'003', b'speech recognition'), (b'004', b'internet/on-line banking'), (b'005', b'electtronic bill presentment'), (b'006', b'batch data entry'), (b'007', b'mobile entry')], help_text=b'Manner in which the payment details are captured.', max_length=3, null=True)),
                ('orig_ref_num', models.CharField(blank=True, help_text=b'Contains the original/previous CRN in the case of a refund or reversal.', max_length=21, null=True)),
                ('ref_rev_code', models.CharField(blank=True, choices=[(b'001', b'payer paid twice'), (b'002', b'payer paid wrong account'), (b'003', b'payer paid wrong biller'), (b'004', b'payer paid wrong amount'), (b'005', b'payer did not authorise'), (b'400', b'Visa chargeback'), (b'500', b'MasterCard chargeback'), (b'600', b'Bankcard chargeback')], help_text=b'Reason code for reversal or refund.', max_length=3, null=True)),
                ('discretionary_data', models.CharField(blank=True, help_text=b'Reason for refund or reversal.', max_length=50, null=True)),
                ('payer_name', models.CharField(blank=True, help_text=b"Name of payer extracted from payer's account details.", max_length=40, null=True)),
                ('country', models.CharField(blank=True, help_text=b'Country of payment.', max_length=3, null=True)),
                ('state', models.CharField(blank=True, help_text=b'State code of payer institution.', max_length=4, null=True)),
                ('car', models.CharField(blank=True, help_text=b'Customer Additional Reference.', max_length=20, null=True)),
                ('discount_ref', models.CharField(blank=True, help_text=b'Discount Reference Code.', max_length=20, null=True)),
                ('discount_method', models.CharField(blank=True, help_text=b'Discount Method Code.', max_length=3, null=True)),
                ('biller_code', models.CharField(max_length=10)),
                ('file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='payments.BpayFile')),
            ],
            options={
                'db_table': 'bpay_bpaytransaction',
            },
        ),
        migrations.CreateModel(
            name='BpointToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DVToken', models.CharField(max_length=128)),
                ('masked_card', models.CharField(max_length=50)),
                ('expiry_date', models.DateField()),
                ('card_type', models.CharField(blank=True, choices=[('AX', 'American Express'), ('DC', 'Diners Club'), ('JC', 'JCB Card'), ('MC', 'MasterCard'), ('VC', 'Visa')], max_length=2, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stored_cards', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'bpoint_bpointtoken',
            },
        ),
        migrations.CreateModel(
            name='BpointTransaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('action', models.CharField(choices=[('payment', 'payment'), ('refund', 'refund'), ('unmatched_refund', 'unmatched_refund'), ('reversal', 'reversal'), ('preauth', 'preauth'), ('capture', 'capture')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('amount_original', models.DecimalField(decimal_places=2, max_digits=12)),
                ('amount_surcharge', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('cardtype', models.CharField(blank=True, choices=[('AX', 'American Express'), ('DC', 'Diners Club'), ('JC', 'JCB Card'), ('MC', 'MasterCard'), ('VC', 'Visa')], max_length=2, null=True)),
                ('crn1', models.CharField(help_text='Reference for the order that the transaction was made for', max_length=50)),
                ('response_code', models.CharField(max_length=50)),
                ('response_txt', models.CharField(max_length=128)),
                ('receipt_number', models.CharField(max_length=50)),
                ('processed', models.DateTimeField()),
                ('settlement_date', models.DateField(blank=True, null=True)),
                ('type', models.CharField(choices=[('callcentre', 'callcentre'), ('cardpresent', 'cardpresent'), ('ecommerce', 'ecommerce'), ('internet', 'internet'), ('ivr', 'ivr'), ('mailorder', 'mailorder'), ('telephoneorder', 'telephoneorder')], max_length=50)),
                ('txn_number', models.CharField(help_text='Transaction number used by BPOINT to identify a transaction', max_length=128, unique=True)),
                ('dvtoken', models.CharField(blank=True, help_text='Stored card dv token', max_length=128, null=True)),
                ('last_digits', models.CharField(blank=True, help_text='Last four digits of card used during checkout', max_length=4, null=True)),
                ('original_txn', models.ForeignKey(blank=True, help_text='Transaction number stored                                            if current transaction depends on a previous transaction                                            in the case where the action is a refund, reversal or capture', null=True, on_delete=django.db.models.deletion.CASCADE, to='payments.BpointTransaction', to_field='txn_number')),
            ],
            options={
                'ordering': ('-created',),
                'db_table': 'bpoint_bpointtransaction',
            },
        ),
        migrations.CreateModel(
            name='CashTransaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('type', models.CharField(choices=[('payment', 'payment'), ('refund', 'refund'), ('reversal', 'reversal')], max_length=8)),
                ('source', models.CharField(choices=[('cash', 'cash'), ('cheque', 'cheque'), ('eftpos', 'eftpos'), ('money_order', 'money_order')], max_length=11)),
                ('region', models.CharField(blank=True, choices=[('kimberley', 'Kimberley'), ('pilbara', 'Pilbara'), ('midwest', 'Midwest'), ('goldfields', 'Goldfields'), ('swan', 'Swan'), ('wheatbelt', 'Wheatbelt'), ('southwest', 'South West'), ('warren', 'Warren'), ('southcoast', 'South Coast')], max_length=50, null=True)),
                ('district', models.CharField(blank=True, choices=[('PHS', 'Perth Hills'), ('SWC', 'Swan Coastal'), ('BWD', 'Blackwood'), ('WTN', 'Wellington'), ('DON', 'Donnelly'), ('FRK', 'Frankland'), ('ALB', 'Albany'), ('ESP', 'Esperance'), ('EKM', 'East Kimberley'), ('WKM', 'West Kimberley'), ('EXM', 'Exmouth'), ('PIL', 'Pilbara'), ('KAL', 'Kalgoorlie'), ('GER', 'Geraldton'), ('MOR', 'Moora'), ('SHB', 'Shark Bay'), ('GSN', 'Great Southern'), ('CWB', 'Central Wheatbelt'), ('SWB', 'Southern Wheatbelt')], max_length=3, null=True)),
                ('external', models.BooleanField(default=False)),
                ('receipt', models.CharField(blank=True, max_length=128, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('PHS', 'Perth Hills'), ('SWC', 'Swan Coastal'), ('BWD', 'Blackwood'), ('WTN', 'Wellington'), ('DON', 'Donnelly'), ('FRK', 'Frankland'), ('ALB', 'Albany'), ('ESP', 'Esperance'), ('EKM', 'East Kimberley'), ('WKM', 'West Kimberley'), ('EXM', 'Exmouth'), ('PIL', 'Pilbara'), ('KAL', 'Kalgoorlie'), ('GER', 'Geraldton'), ('MOR', 'Moora'), ('SHB', 'Shark Bay'), ('GSN', 'Great Southern'), ('CWB', 'Central Wheatbelt'), ('SWB', 'Southern Wheatbelt')], max_length=3, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('text', models.TextField(blank=True, null=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('order_number', models.CharField(max_length=50, unique=True)),
                ('reference', models.CharField(max_length=50, unique=True)),
                ('system', models.CharField(blank=True, max_length=4, null=True)),
                ('token', models.CharField(blank=True, max_length=80, null=True)),
                ('voided', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'invoice_invoice',
            },
        ),
        migrations.CreateModel(
            name='InvoiceBPAY',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bpay', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='payments.BpayTransaction')),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='payments.Invoice')),
            ],
            options={
                'db_table': 'invoice_invoicebpay',
            },
        ),
        migrations.CreateModel(
            name='OracleParser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inserted', models.DateTimeField(auto_now_add=True)),
                ('date_parsed', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='OracleParserInvoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference', models.CharField(max_length=50)),
                ('details', django.contrib.postgres.fields.jsonb.JSONField()),
                ('parser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='payments.OracleParser')),
            ],
        ),
        migrations.CreateModel(
            name='OracleParser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inserted', models.DateTimeField(auto_now_add=True)),
                ('date_parsed', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='OracleParserInvoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference', models.CharField(max_length=50)),
                ('details', django.contrib.postgres.fields.jsonb.JSONField()),
                ('parser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='payments.OracleParser')),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='UsedBpointToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('DVToken', models.CharField(max_length=128)),
            ],
        ),
        migrations.AddField(
            model_name='district',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='districts', to='payments.Region'),
        ),
        migrations.AddField(
            model_name='cashtransaction',
            name='invoice',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cash_transactions', to='payments.Invoice', to_field='reference'),
        ),
        migrations.AddField(
            model_name='cashtransaction',
            name='original_txn',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='payments.CashTransaction'),
        ),
        migrations.AlterUniqueTogether(
            name='bpayfile',
            unique_together=set([('created', 'file_id')]),
        ),
        migrations.AddField(
            model_name='bpayaccounttrailer',
            name='file',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='account_trailerrecords', to='payments.BpayFile'),
        ),
        migrations.AddField(
            model_name='bpayaccountrecord',
            name='file',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='account_records', to='payments.BpayFile'),
        ),
        migrations.AddField(
            model_name='billercoderecipient',
            name='app',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipients', to='payments.BillerCodeSystem'),
        ),
        migrations.AlterUniqueTogether(
            name='bpointtoken',
            unique_together=set([('user', 'masked_card', 'expiry_date', 'card_type')]),
        ),
        migrations.AlterUniqueTogether(
            name='bpaytransaction',
            unique_together=set([('crn', 'txn_ref', 'p_date')]),
        ),
    ]

    database_operations = [
        migrations.CreateModel(
            name='OracleParser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inserted', models.DateTimeField(auto_now_add=True)),
                ('date_parsed', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='OracleParserInvoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference', models.CharField(max_length=50)),
                ('details', django.contrib.postgres.fields.jsonb.JSONField()),
                ('parser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='payments.OracleParser')),
            ],
        ),
    ]

    operations = [
        migrations.SeparateDatabaseAndState(
            state_operations=state_operations,
            database_operations=database_operations
        ),
    ]
